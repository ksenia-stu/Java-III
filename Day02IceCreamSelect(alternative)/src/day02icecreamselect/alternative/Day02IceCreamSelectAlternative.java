/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package day02icecreamselect.alternative;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class Day02IceCreamSelectAlternative extends javax.swing.JFrame {

    DefaultListModel<String> modelSelectedList = new DefaultListModel<>();
    DefaultListModel<String> modelAvailableList = new DefaultListModel<>();
    /**
     * Creates new form Day02IceCreamSelectAlternative
     */
    public Day02IceCreamSelectAlternative() {
        initComponents();
        //this is right after window has been initialized
        // loading info from a file
        try(Scanner fileInput = new Scanner(new File("available.txt")))       //try to read from file
        {
            //while there is next line, keep loading
            while(fileInput.hasNextLine())
            {
                String flavour = fileInput.nextLine();
                modelAvailableList.addElement(flavour);    //add loaded elements to model of left list
            }
        }
        catch (IOException ex)
        {
            //if file is not found or any problem, display error message
            JOptionPane.showMessageDialog(this,"Unable to read from file: \n" + ex.getMessage(),"fatal error - file access error: ",  
                       JOptionPane.ERROR_MESSAGE);
            //since file is not found and it is a fatal error then close program
            System.exit(1);   //1 if there was a problem and 0 if there was none
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btDeleteScoop = new javax.swing.JButton();
        btClearAll = new javax.swing.JButton();
        lblFlavours = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstFlavours = new javax.swing.JList<>();
        btAdd = new javax.swing.JButton();
        lblSelected = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstSelectedFlavours = new javax.swing.JList<>();
        btSavePlaceOrder = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btDeleteScoop.setText("Delete Scoops");
        btDeleteScoop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteScoopActionPerformed(evt);
            }
        });

        btClearAll.setText("Clear All");
        btClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btClearAllActionPerformed(evt);
            }
        });

        lblFlavours.setText("Flavours :");

        lstFlavours.setModel(modelAvailableList);
        jScrollPane1.setViewportView(lstFlavours);

        btAdd.setText("Add   =>");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        lblSelected.setText("Selected :");

        lstSelectedFlavours.setModel(modelSelectedList);
        jScrollPane2.setViewportView(lstSelectedFlavours);

        btSavePlaceOrder.setText("Save & Place Order");
        btSavePlaceOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSavePlaceOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFlavours)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(btAdd)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btDeleteScoop)
                    .addComponent(lblSelected)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btSavePlaceOrder)
                    .addComponent(btClearAll))
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFlavours)
                    .addComponent(lblSelected))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(btAdd))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))))
                .addGap(35, 35, 35)
                .addComponent(btDeleteScoop)
                .addGap(18, 18, 18)
                .addComponent(btClearAll)
                .addGap(18, 18, 18)
                .addComponent(btSavePlaceOrder)
                .addContainerGap(67, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btDeleteScoopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteScoopActionPerformed
/*-------------------DELETE 1 SCOOP    
//deleting flavour
    int index = lstSelectedFlavours.getSelectedIndex();  //asking for index of selected item
    if(index == -1)
    {
       JOptionPane.showMessageDialog(this, "Select index to delete first", "Internal error",JOptionPane.ERROR_MESSAGE);
            return;
    }
       if (index != -1)
        {
          int dialogAnswer = JOptionPane.showConfirmDialog (null, "Would you like to confirm item to be deleted?",
             "Confirmation needed",JOptionPane.YES_NO_OPTION);
        if(dialogAnswer == JOptionPane.YES_OPTION)
        {
      //add value of string flavour to delault list model
           
            modelSelectedList.remove(index);       -----------*/

/*-------------------DELETE MULTIPLE SCOOPS*/
//put selected items indexes(indices) in array of integers called selectedIndicesArray
int [] selectedIndicesArray = lstSelectedFlavours.getSelectedIndices();

//check if array is empty(no flavours in right list to be deleted)
    if(selectedIndicesArray.length == 0)
    {
       JOptionPane.showMessageDialog(this, "Select flavours to delete first", "Input error",JOptionPane.ERROR_MESSAGE);
            return;
    }
    
   //to remove selected item(s) from array in reverse order
    for(int i = selectedIndicesArray.length -1; i >=0; i--)
    {
        int index = selectedIndicesArray[i];
        modelSelectedList.remove(index);
    }
        
 /*      if (index != -1)
        {
          int dialogAnswer = JOptionPane.showConfirmDialog (null, "Would you like to confirm item to be deleted?",
             "Confirmation needed",JOptionPane.YES_NO_OPTION);
        if(dialogAnswer == JOptionPane.YES_OPTION)
        {
      //add value of string flavour to delault list model
           
            modelSelectedList.remove(index);          */                     
                                                           // --------------*/

    }//GEN-LAST:event_btDeleteScoopActionPerformed

    private void btClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btClearAllActionPerformed
    //to check if there are flavours in right list
        if(modelSelectedList.isEmpty())
      {
          JOptionPane.showMessageDialog(this, "Please select flavours, cant clear an empty order", "Selection error",JOptionPane.ERROR_MESSAGE);
          return;
      }
        int result = JOptionPane.showConfirmDialog (null, "Would you like to delete all items?",
             "Confirmation needed",JOptionPane.OK_CANCEL_OPTION);
        if(result == JOptionPane.OK_OPTION)
        {
             modelSelectedList.removeAllElements();
        }
    }//GEN-LAST:event_btClearAllActionPerformed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
         /* CODE FOR SINGLE SELECTION */
    /*---------
         //adding single flavour  ( to allow only single flavour need to go to properties of
        //list and change selectionMode to single
        String flavour =  lstFlavours.getSelectedValue();
        if (flavour == null)
        {
            JOptionPane.showMessageDialog(this, "No items selected, select flavour", "Internal error",JOptionPane.ERROR_MESSAGE);
            return;
        }
        modelSelectedList.addElement(flavour);   ----------- */
    
    /* CODE FOR MULTIPLE SELECTION */
    //----------------------
    //adding multiple flavours  ( to allow multiple flavours need to go to properties of
    //list and change selectionMode to multipleInterval
    
    // to get multiple selected values from a list (left) and put them into an array(java util List) called selectedList
    List<String> selectedList = lstFlavours.getSelectedValuesList();
    
    //to check if created List is empty then ask user to select flavours to be addded
    if(selectedList.isEmpty())
    {
        JOptionPane.showMessageDialog(this, "Please select flavours to add", "Selection error",JOptionPane.ERROR_MESSAGE);
          return;
    }
    
    //add items from List (which came from list on the left) to model (list) on the right
    modelSelectedList.addAll(selectedList);
    
    //clear selection(s) from left list
    lstFlavours.clearSelection();
   



    //-------------------------
    }//GEN-LAST:event_btAddActionPerformed

    private void btSavePlaceOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSavePlaceOrderActionPerformed
      //to check if selection list is empty before sending it to array list
      if(modelSelectedList.isEmpty())
      {
          JOptionPane.showMessageDialog(this, "Please select flavours, cant place an empty order", "Selection error",JOptionPane.ERROR_MESSAGE);
          return;
      }

//get content of model (on the right) into array list called flavList
     ArrayList<String> flavList = Collections.list(modelSelectedList.elements());
     //separate items from array list by ; and make a string out of it
     String line = String.join(";", flavList);
     
     //output to file and append there (for it added filewriter and true)
     try (PrintWriter fileOutput = new PrintWriter(new FileWriter(new File("purchases.txt"),true)))
     {
         fileOutput.println(line);
         JOptionPane.showMessageDialog(this, "Order placed", "Success",JOptionPane.INFORMATION_MESSAGE);
         // to clear right list after order is placed
         modelSelectedList.clear();
     }
     catch(IOException ex)
     {
          JOptionPane.showMessageDialog(this, "Unable writing to file: \n" +ex.getMessage(), "File access error",JOptionPane.ERROR_MESSAGE);
                   
     }
    }//GEN-LAST:event_btSavePlaceOrderActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
       
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Day02IceCreamSelectAlternative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Day02IceCreamSelectAlternative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Day02IceCreamSelectAlternative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Day02IceCreamSelectAlternative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Day02IceCreamSelectAlternative().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btClearAll;
    private javax.swing.JButton btDeleteScoop;
    private javax.swing.JButton btSavePlaceOrder;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblFlavours;
    private javax.swing.JLabel lblSelected;
    private javax.swing.JList<String> lstFlavours;
    private javax.swing.JList<String> lstSelectedFlavours;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package day05travellers;


import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class Day05Travellers extends javax.swing.JFrame {

    //possibilities of sorting
    enum SortOrder {Name, Gender, DepDate, TripLength}
    
    //initial sorting order by name
    private SortOrder currSortOrder;  //initially null
    
    //sorting direction
    boolean currSortDirectionForward = true;
    
    final String ARROW_UP = "\u2191";
    final String ARROW_DOWN = "\u2193";
    
    ArrayList<Traveller> travellersList = new ArrayList<>();
    DefaultListModel <Traveller> modelTravellersList = new DefaultListModel<>();
    
    //create a map of posiible sortings
    Map<SortOrder, Comparator<Traveller>> sortMap = Map.of(
            SortOrder.Name,Traveller.compareByName,
            SortOrder.Gender,Traveller.compareByGender,
            SortOrder.DepDate,Traveller.compareByDepDate,
            SortOrder.TripLength,Traveller.compareByTripLength
    );
    
    //create map for sort order and button with direction
    Map<SortOrder, JButton> sortButtonMap = new HashMap<>();
    
    /**
     * Creates new form Day05Travellers
     */
    public Day05Travellers() {
        initComponents();
        sortButtonMap.put(SortOrder.Name,btSortName);
        sortButtonMap.put(SortOrder.Gender,btSortGender);
        sortButtonMap.put(SortOrder.DepDate,btSortDepDate);
        sortButtonMap.put(SortOrder.TripLength,btSortTripLength);
        directionButtonClicked(SortOrder.Name);
        
       try
       {
           loadDataFromFile();
           updateModelFromList();
       }
        catch(InvalidDataException ex)
                {
                        JOptionPane.showMessageDialog(this,ex.getMessage(),"Error reading from file",  
                       JOptionPane.ERROR_MESSAGE);
                }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblName = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        lblGender = new javax.swing.JLabel();
        comboGender = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        tfPassportNo = new javax.swing.JTextField();
        lblAirportCode = new javax.swing.JLabel();
        tfAirportCode = new javax.swing.JTextField();
        lblDepartureDate = new javax.swing.JLabel();
        tfDepartureDate = new javax.swing.JTextField();
        lblReturnDate = new javax.swing.JLabel();
        tfReturnDate = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstTravellers = new javax.swing.JList<>();
        btAdd = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();
        btUpdate = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btSortName = new javax.swing.JButton();
        btSortGender = new javax.swing.JButton();
        btSortDepDate = new javax.swing.JButton();
        btSortTripLength = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lblName.setText("Name:");

        lblGender.setText("Gender:");

        comboGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other" }));

        jLabel1.setText("Passport No:");

        lblAirportCode.setText("Destination airport code:");

        lblDepartureDate.setText("Departure date:");

        lblReturnDate.setText("Return date:");

        lstTravellers.setModel(modelTravellersList);
        lstTravellers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstTravellersValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstTravellers);

        btAdd.setText("Add");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        btDelete.setText("Delete");
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });

        btUpdate.setText("Update");
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });

        jLabel2.setText("Sort by:");

        btSortName.setText("Name ");
        btSortName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSortNameActionPerformed(evt);
            }
        });

        btSortGender.setText("Gender");
        btSortGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSortGenderActionPerformed(evt);
            }
        });

        btSortDepDate.setText("Departure date");
        btSortDepDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSortDepDateActionPerformed(evt);
            }
        });

        btSortTripLength.setText("Trip length");
        btSortTripLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSortTripLengthActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btSortDepDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btSortGender, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                                .addComponent(btSortName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(btSortTripLength, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblReturnDate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tfReturnDate))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblDepartureDate)
                                        .addGap(18, 18, 18)
                                        .addComponent(tfDepartureDate))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblAirportCode)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tfAirportCode, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblGender)
                                        .addGap(18, 18, 18)
                                        .addComponent(comboGender, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblName)
                                            .addGap(18, 18, 18)
                                            .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(tfPassportNo, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                        .addComponent(btAdd)
                        .addGap(12, 12, 12)
                        .addComponent(btDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btUpdate)
                        .addGap(40, 40, 40))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName)
                            .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGender)
                            .addComponent(comboGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(tfPassportNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAirportCode)
                            .addComponent(tfAirportCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDepartureDate)
                            .addComponent(tfDepartureDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblReturnDate)
                            .addComponent(tfReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(btAdd)
                    .addComponent(btDelete)
                    .addComponent(btUpdate)
                    .addComponent(btSortName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btSortGender)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btSortDepDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btSortTripLength)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    
     //method to reverse sorting direction
    private void directionButtonClicked(SortOrder so)
    {
        //remove arrow from current selection
        if(currSortOrder != null)  //first execution will have so null
        {
            JButton btn = sortButtonMap.get(currSortOrder); //gives button
            btn.setText(removeLastCharacter(btn.getText()));
        }
        
        
        if(currSortOrder == so)
        {
            currSortDirectionForward = currSortDirectionForward ? false : true;
        }
        else
        {
            currSortOrder = so;
            currSortDirectionForward = true;
        }
        JButton btn = sortButtonMap.get(so);
        btn.setText(btn.getText() + (currSortDirectionForward ? ARROW_UP : ARROW_DOWN));
    }
    
    
    
    
    //method that will copy info from array List to model (already sorted data)
    private void updateModelFromList()
    {
        //sorting
        Collections.sort(travellersList,sortMap.get(currSortOrder));
        //if sort order forward, if sort order backward
        if(!currSortDirectionForward)
        {
            Collections.reverse(travellersList);
        }
        
        //clear what's in model
        modelTravellersList.clear();
        
        //add new objects from array list to model
        modelTravellersList.addAll(travellersList);  //can be also done with for (each) loop
        
    }
    
    
    private Traveller getTravellerFromUserInput(Traveller traveller) throws InvalidDataException
    {
        //name
        String name = tfName.getText();
        
        //gender
        Gender gender = null;
       try
       {
          gender = Gender.valueOf(comboGender.getSelectedItem().toString()); //throws IllegalArgumentException
       }
       catch(IllegalArgumentException ex)
       {
           throw new InvalidDataException ("Internal error: Unable to parse gender to enum");
          
       }
       
       //passportNo
       String passportNo = tfPassportNo.getText();
       
       //destination airport code
       String airportCode = tfAirportCode.getText();
       
       //departure date
       Date depDate = null;
       try
       {
            depDate = Traveller.dateFormat.parse(tfDepartureDate.getText()); 
       }
       catch(ParseException ex)
       {
           throw new InvalidDataException ("Input error: Unable to parse departure date");
       }
       
       //return date
       Date retDate = null;
       try
       {
            retDate = Traveller.dateFormat.parse(tfReturnDate.getText()); 
       }
       catch(ParseException ex)
       {
           throw new InvalidDataException ("Input error: Unable to parse return date");
       }
       
                 if(traveller == null)
                 {
                     
                     traveller = new Traveller(name,gender,
                             passportNo,airportCode,depDate, retDate); //throws InvalidDataException
                    
                 }
                 else
                 {
                     traveller.setName(name);   //throws InvalidDataException
                     traveller.setGender(gender);    //throws InvalidDataException
                     traveller.setPassportNo(passportNo);   //throws InvalidDataException
                     traveller.setDestAirportCode(airportCode);   //throws InvalidDataException
                     traveller.setDepRetDate(depDate, retDate);   //throws InvalidDataException
                 }

       return traveller;
       
    } 
    
    private void clearFields()
    {
        tfName.setText("");
        comboGender.setSelectedIndex(0);
        tfPassportNo.setText("");
        tfAirportCode.setText("");
        tfDepartureDate.setText("");
        tfReturnDate.setText("");
        
    }
    
    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        
         try
         {
            Traveller traveller = getTravellerFromUserInput(null); //throws InvalidDataException
            
            travellersList.add(traveller);
            updateModelFromList();
            //modelTravellersList.addElement(traveller);
             clearFields();
         }
        catch(InvalidDataException ex)
        {
            
          JOptionPane.showMessageDialog(this,ex.getMessage(),"Input error",  
                       JOptionPane.ERROR_MESSAGE);
        }
     
    }//GEN-LAST:event_btAddActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
       if(modelTravellersList.isEmpty())
       {
           JOptionPane.showMessageDialog(this,"List is empty. Notjing to delete","Input error",  
                       JOptionPane.ERROR_MESSAGE);
           return;
       }
       if(lstTravellers.getSelectedIndex() == -1)
       {
           JOptionPane.showMessageDialog(this,"First select item to delete","Input error",  
                       JOptionPane.ERROR_MESSAGE);
           return;
       }
       travellersList.remove(lstTravellers.getSelectedIndex());
       updateModelFromList();
     //  modelTravellersList.remove(lstTravellers.getSelectedIndex());
    }//GEN-LAST:event_btDeleteActionPerformed

    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed
       if(modelTravellersList.isEmpty())
       {
           JOptionPane.showMessageDialog(this,"List is empty. Nothing to update","Input error",  
                       JOptionPane.ERROR_MESSAGE);
           return;
       }
       if(lstTravellers.getSelectedIndex() == -1)
       {
           JOptionPane.showMessageDialog(this,"First select item to update","Input error",  
                       JOptionPane.ERROR_MESSAGE);
           return;
       }
       try
       {
          Traveller traveller = getTravellerFromUserInput(lstTravellers.getSelectedValue()); //throws InvalidDataException 
          travellersList.set(lstTravellers.getSelectedIndex(), traveller);
          updateModelFromList();
       }
       catch(InvalidDataException ex)
       {
           JOptionPane.showMessageDialog(this,ex.getMessage(),"Input error",  
                       JOptionPane.ERROR_MESSAGE);
       }
        
    }//GEN-LAST:event_btUpdateActionPerformed

    private void lstTravellersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstTravellersValueChanged
       if(lstTravellers.getSelectedIndex() == -1)
       {
            clearFields();
       }
        if(!modelTravellersList.isEmpty())
       {
           Traveller traveller = lstTravellers.getSelectedValue();
           tfName.setText(traveller.getName());
           comboGender.getModel().setSelectedItem(traveller.getGender());
        tfPassportNo.setText(traveller.getPassportNo());
        tfAirportCode.setText(traveller.getDestAirportCode());
        tfDepartureDate.setText(Traveller.dateFormat.format(traveller.getDepDate()));
        tfReturnDate.setText(Traveller.dateFormat.format(traveller.getRetDate()));
           
       }  
      
    }//GEN-LAST:event_lstTravellersValueChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try
        {
            saveDataToFile(); //throws InvalidDataException
        }
        catch(InvalidDataException ex)
                {
                        JOptionPane.showMessageDialog(this,ex.getMessage(),"Error",  
                       JOptionPane.ERROR_MESSAGE);
                }
        
    }//GEN-LAST:event_formWindowClosing

    //method to remove last character from button
    public static String removeLastCharacter(String str)
    {
        String result = null;
        if((str != null) && (str.length() > 0))
        {
            result = str.substring(0, str.length() -1);
        }
        return result;
    }
    
    
    
   
    
    private void btSortNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSortNameActionPerformed
       directionButtonClicked(SortOrder.Name);
     //   currSortOrder = SortOrder.Name; //no need
        updateModelFromList();
    }//GEN-LAST:event_btSortNameActionPerformed

    private void btSortGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSortGenderActionPerformed
       directionButtonClicked(SortOrder.Gender);
     //   currSortOrder = SortOrder.Gender;  //no need
        updateModelFromList();
    }//GEN-LAST:event_btSortGenderActionPerformed

    private void btSortDepDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSortDepDateActionPerformed
        directionButtonClicked(SortOrder.DepDate);
     //   currSortOrder = SortOrder.DepDate;  //no need
        updateModelFromList();
    }//GEN-LAST:event_btSortDepDateActionPerformed

    private void btSortTripLengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSortTripLengthActionPerformed
        directionButtonClicked(SortOrder.TripLength);
     //   currSortOrder = SortOrder.TripLength;  //no need
        updateModelFromList();
    }//GEN-LAST:event_btSortTripLengthActionPerformed

    
    
    
    public final String FILE_NAME = "travels.txt";
    
    private void saveDataToFile() throws InvalidDataException //think of File as path
    {
        try(PrintWriter fileOutput = new PrintWriter(new FileWriter(new File(FILE_NAME), false)))
        {
            for(int i =0; i < modelTravellersList.size(); i++)
                {
                   // save to ArrayList
                    fileOutput.println(travellersList.get(i).toDataString());
                    
                   // fileOutput.println(modelTravellersList.getElementAt(i));
                }
        }
        catch(IOException ex)
        {
           JOptionPane.showMessageDialog(this,"Unable to write to file","Output error",  
                       JOptionPane.ERROR_MESSAGE);
            
        }
    }
    
    private void loadDataFromFile() throws InvalidDataException
    {
       //array to collect errors
        ArrayList<String> errors = new ArrayList<>();
        int lineNo = 0;
        // loading info from a file
        try(Scanner fileInput = new Scanner(new File(FILE_NAME)))       //try to read from file
        {
           
            //while there is next line, keep loading
            while(fileInput.hasNextLine())
            {
                try
                {
                    lineNo++;
                    Traveller traveller = new Traveller(fileInput.nextLine());  //throws InvalidDataException
                    
                    //loading data from txt file into arrayList
                    travellersList.add(traveller);
                  //  modelTravellersList.addElement(traveller);
                }
                catch(InvalidDataException ex)
                {
                    errors.add(String.format("Errors in line %d : %s", lineNo,ex.getMessage()));
                        JOptionPane.showMessageDialog(this,ex.getMessage(),"Error",  
                       JOptionPane.ERROR_MESSAGE);
                }
                
            }  
        }
        //this is handled outside of loop cuz if file is no found then there is no need to try read other lines 
        catch (IOException ex)
        {
            JOptionPane.showMessageDialog(this,"Unable reding from file:" + ex.getMessage(),
                    "File access error:",  
                       JOptionPane.ERROR_MESSAGE); 
        }
        if(!errors.isEmpty())
        {
            JOptionPane.showMessageDialog(this,errors,
                    "File error",  
                       JOptionPane.ERROR_MESSAGE); 
        }
       
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Day05Travellers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Day05Travellers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Day05Travellers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Day05Travellers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Day05Travellers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btSortDepDate;
    private javax.swing.JButton btSortGender;
    private javax.swing.JButton btSortName;
    private javax.swing.JButton btSortTripLength;
    private javax.swing.JButton btUpdate;
    private javax.swing.JComboBox<String> comboGender;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAirportCode;
    private javax.swing.JLabel lblDepartureDate;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblReturnDate;
    private javax.swing.JList<Traveller> lstTravellers;
    private javax.swing.JTextField tfAirportCode;
    private javax.swing.JTextField tfDepartureDate;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfPassportNo;
    private javax.swing.JTextField tfReturnDate;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package day03peopleadvanced;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class Day03PeopleAdvanced extends javax.swing.JFrame {

//create model (kind of array list) that takes object of class Person as items
/* After that go to properties of jList in design and change in code
    Type Parameters from <String> to <Person>
    */
    DefaultListModel<Person> modelPeopleList = new DefaultListModel<>();
    /**
     * Creates new form Day03PeopleAdvanced
     */
    public Day03PeopleAdvanced() {
        initComponents();
        
        // loading info from a file
        try(Scanner fileInput = new Scanner(new File("data.txt")))       //try to read from file
        {
            //while there is next line, keep loading
            while(fileInput.hasNextLine())
            {
                String info = fileInput.hasNextLine();
                String name = fileInput.next();
                int heightCm = fileInput.nextInt();
                Date dateOfBirth = null;
                try {
                    dateOfBirth = format.parse(fileInput.next());
                } catch (ParseException ex) {
                    Logger.getLogger(Day03PeopleAdvanced.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                Person item = new Person(name, heightCm, dateOfBirth);
                modelPeopleList.addElement(item);    //add loaded elements to model of left list
            }
        }
        catch (IOException ex)
        {
            //if file is not found or any problem, display error message
            JOptionPane.showMessageDialog(this,"Unable to read from file: \n" + ex.getMessage(),"fatal error - file access error: ",  
                       JOptionPane.ERROR_MESSAGE);
            //since file is not found and it is a fatal error then close program
            System.exit(1);   //1 if there was a problem and 0 if there was none
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfFilter = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstPeople = new javax.swing.JList<>();
        lblName = new javax.swing.JLabel();
        lblHeight = new javax.swing.JLabel();
        lblFilter = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        sliderHeight = new javax.swing.JSlider();
        lblDateOfBirth = new javax.swing.JLabel();
        tfDateOfBirth = new javax.swing.JTextField();
        btAddPerson = new javax.swing.JButton();
        btDeletePerson = new javax.swing.JButton();
        btUpdatePerson = new javax.swing.JButton();
        tfHeight = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tfFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfFilterActionPerformed(evt);
            }
        });

        lstPeople.setModel(modelPeopleList);
        lstPeople.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstPeople.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstPeopleValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstPeople);

        lblName.setText("Name:");

        lblHeight.setText("Height (cm):");

        lblFilter.setText("Filter");

        sliderHeight.setMajorTickSpacing(50);
        sliderHeight.setMaximum(250);
        sliderHeight.setMinorTickSpacing(5);
        sliderHeight.setPaintLabels(true);
        sliderHeight.setPaintTicks(true);
        sliderHeight.setValue(170);
        sliderHeight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderHeightStateChanged(evt);
            }
        });

        lblDateOfBirth.setText("Date of Birth (yyyy/mm/dd):");

        btAddPerson.setText("Add person");
        btAddPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddPersonActionPerformed(evt);
            }
        });

        btDeletePerson.setText("Delete person");
        btDeletePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeletePersonActionPerformed(evt);
            }
        });

        btUpdatePerson.setText("Update person");
        btUpdatePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdatePersonActionPerformed(evt);
            }
        });

        tfHeight.setText("170");
        tfHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfHeightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblName)
                        .addGap(18, 18, 18)
                        .addComponent(tfName))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblHeight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sliderHeight, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btUpdatePerson, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                            .addComponent(btDeletePerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btAddPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tfDateOfBirth))))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName)
                    .addComponent(lblFilter)
                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblHeight)
                                .addComponent(tfHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(sliderHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDateOfBirth)
                            .addComponent(tfDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addComponent(btAddPerson)
                        .addGap(18, 18, 18)
                        .addComponent(btDeletePerson)))
                .addGap(18, 18, 18)
                .addComponent(btUpdatePerson)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //validate name
    private boolean validateName(String name)
       {
        
        //regex to check name
         final String NAME_PATTERN = "[-()\\ a-zA-Z]{1,100}";
  
        // Return true if the name matches the name regex 
         return name.matches(NAME_PATTERN);
        
       }
    SimpleDateFormat format = new SimpleDateFormat("yyyy-mm-dd");
    Date date;
    //validate date (returns null if all is fine, otherwise string describing problem
     private String validateDate(String DOB)
     {
         try
         {
             
             date = format.parse(DOB);
             if (!date.after(format.parse("1900-01-01")) || !date.before(format.parse("2100-01-01")))
                 return "Year must be between 1900 and 2100";
         }
         catch (ParseException ex)
         {
              return "Wrong date: " + ex.getMessage();
         }
         return null;
     }
     
    
    
    private void tfFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfFilterActionPerformed

    private void btAddPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddPersonActionPerformed
        //check for validation
    try
    {
    if(validateName(tfName.getText()) && validateDate(tfDateOfBirth.getText()) == null)
    {
        modelPeopleList.addElement(new Person(tfName.getText(),sliderHeight.getValue(),format.parse(tfDateOfBirth.getText())));
    }
    //if name does not validate
    else if (!validateName(tfName.getText()))
           {
               JOptionPane.showMessageDialog(this,"Name does not meet requirements:\n"
                       + "must be 1-100 characters \n only letters, spaces,dot, dash, parenthesis allowed", "Input error",  //"Input error" is the title of the error window
                       JOptionPane.ERROR_MESSAGE);
           }

    //if date does not validate
    else if ( validateDate(tfDateOfBirth.getText()) != null)
          {
             JOptionPane.showMessageDialog(this, validateDate(tfDateOfBirth.getText()), "Information",  
                       JOptionPane.INFORMATION_MESSAGE); 
          }
    }
    catch(Exception ex)
    {
        JOptionPane.showMessageDialog(this,"Something went wrong", "Error",  
                       JOptionPane.ERROR_MESSAGE);
    }
        
        
        
    }//GEN-LAST:event_btAddPersonActionPerformed

    private void sliderHeightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderHeightStateChanged
      tfHeight.setText((sliderHeight.getValue()) +"");
    }//GEN-LAST:event_sliderHeightStateChanged

    private void tfHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfHeightActionPerformed
        int height_tf;
        try
        {
            
            height_tf = Integer.parseInt(tfHeight.getText());
            
            
            if(height_tf < 0)
            {
                height_tf = 0;
                tfHeight.setText("0");
            }
            if(height_tf > 250)
            {
                height_tf = 250;
                tfHeight.setText("250");
            }
            
        }
        catch(NumberFormatException e)
        {
              JOptionPane.showMessageDialog(this,"Height must be numerical and not empty", "Input error",
                    JOptionPane.ERROR_MESSAGE);
              height_tf = 170;
              tfHeight.setText("170");
        }
        
        sliderHeight.setValue(height_tf);
    }//GEN-LAST:event_tfHeightActionPerformed

    private void btDeletePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeletePersonActionPerformed
    // deleting person
    int index = lstPeople.getSelectedIndex();  //asking for index of selected item
    if(index == -1)
    {
       JOptionPane.showMessageDialog(this, "Select person to delete first", "Selection error",JOptionPane.ERROR_MESSAGE);
            return;
    }
       if (index != -1)
        {
          int dialogAnswer = JOptionPane.showConfirmDialog (null, "Would you like to confirm person to be deleted?",
             "Confirmation needed",JOptionPane.YES_NO_OPTION);
            if(dialogAnswer == JOptionPane.YES_OPTION)
            {
          //remove person
            modelPeopleList.remove(index);
          //clear selection(s) from left
            lstPeople.clearSelection();
            }
        }
    }//GEN-LAST:event_btDeletePersonActionPerformed

    private void btUpdatePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdatePersonActionPerformed
    // updating person
    int index = lstPeople.getSelectedIndex();  //asking for index of selected item
        if(index == -1)  //if empty > error
        {
           JOptionPane.showMessageDialog(this, "Select person to update first", "Selection error",JOptionPane.ERROR_MESSAGE);
                return;
        }
        if (index != -1)
            {
              int dialogAnswer = JOptionPane.showConfirmDialog (null, "Would you like to update person?",
                 "Confirmation needed",JOptionPane.YES_NO_OPTION);
                if(dialogAnswer == JOptionPane.YES_OPTION)
                {
              //update person
                 Person item1 = null;
                  try {
                      item1 = new Person(tfName.getText(),Integer.parseInt(tfHeight.getText()),format.parse(tfDateOfBirth.getText()));
                  } catch (ParseException ex) {
                      Logger.getLogger(Day03PeopleAdvanced.class.getName()).log(Level.SEVERE, null, ex);
                  }
                  modelPeopleList.setElementAt(item1, index);
              
                }
            }

    }//GEN-LAST:event_btUpdatePersonActionPerformed

    private void lstPeopleValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstPeopleValueChanged
     
     Person item = lstPeople.getModel().getElementAt(lstPeople.getSelectedIndex());
    
    
    tfName.setText(item.getName());
    tfHeight.setText(item.getHeightCm()+"");
    sliderHeight.setValue(item.getHeightCm());
    tfDateOfBirth.setText(item.getDateOfBirth()+"");
    }//GEN-LAST:event_lstPeopleValueChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    if(!modelPeopleList.isEmpty())
    {
       //output to file and append there (for it added filewriter and true)
     try (PrintWriter fileOutput = new PrintWriter(new FileWriter(new File("data.txt"),true)))
     {
         for(int i = 0; i <= modelPeopleList.size()-1; i++)
         {
             fileOutput.println(modelPeopleList.elementAt(i));
         }
   
     }
     catch(IOException ex)
     {
          System.exit(1);
                   
     }
    }
        
           
        
       


    }//GEN-LAST:event_formWindowClosing

        
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Day03PeopleAdvanced.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Day03PeopleAdvanced.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Day03PeopleAdvanced.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Day03PeopleAdvanced.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Day03PeopleAdvanced().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddPerson;
    private javax.swing.JButton btDeletePerson;
    private javax.swing.JButton btUpdatePerson;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDateOfBirth;
    private javax.swing.JLabel lblFilter;
    private javax.swing.JLabel lblHeight;
    private javax.swing.JLabel lblName;
    private javax.swing.JList<Person> lstPeople;
    private javax.swing.JSlider sliderHeight;
    private javax.swing.JTextField tfDateOfBirth;
    private javax.swing.JTextField tfFilter;
    private javax.swing.JTextField tfHeight;
    private javax.swing.JTextField tfName;
    // End of variables declaration//GEN-END:variables
}

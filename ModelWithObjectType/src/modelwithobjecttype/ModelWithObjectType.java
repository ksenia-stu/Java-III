/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package modelwithobjecttype;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class ModelWithObjectType extends javax.swing.JFrame {

    DefaultListModel<Person> modelPeopleList = new DefaultListModel<>();
    /**
     * Creates new form ModelWithObjectType
     */
    public ModelWithObjectType() {
        initComponents();
        loadDataFromFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblName = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        lblHeight = new javax.swing.JLabel();
        sliderHeight = new javax.swing.JSlider();
        tfHeight = new javax.swing.JTextField();
        lblDOB = new javax.swing.JLabel();
        tfDOB = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstPeople = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lblName.setText("Name:");

        lblHeight.setText("Height (cm) :");

        sliderHeight.setMajorTickSpacing(50);
        sliderHeight.setMaximum(250);
        sliderHeight.setMinorTickSpacing(10);
        sliderHeight.setPaintLabels(true);
        sliderHeight.setPaintTicks(true);
        sliderHeight.setValue(160);
        sliderHeight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderHeightStateChanged(evt);
            }
        });

        tfHeight.setText("160");
        tfHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfHeightActionPerformed(evt);
            }
        });
        tfHeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfHeightKeyReleased(evt);
            }
        });

        lblDOB.setText("Date of birth: (yyyy/mm/dd)");

        jButton1.setText("Add person");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Delete person");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Update person");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        lstPeople.setModel(modelPeopleList);
        lstPeople.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(lstPeople);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(188, 188, 188))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblDOB)
                                .addGap(18, 18, 18)
                                .addComponent(tfDOB))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblHeight)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(tfHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(sliderHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblName)
                                    .addGap(18, 18, 18)
                                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(42, 42, 42))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName)
                            .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblHeight)
                                .addComponent(tfHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(sliderHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDOB)
                            .addComponent(tfDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(51, 51, 51)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(89, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void sliderHeightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderHeightStateChanged
       tfHeight.setText(sliderHeight.getValue()+"");
    }//GEN-LAST:event_sliderHeightStateChanged

    private void tfHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfHeightActionPerformed
       
        
    }//GEN-LAST:event_tfHeightActionPerformed

    final int DEFAULT_HEIGHT = 170;
    private void tfHeightKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfHeightKeyReleased
         int height = 0;
        try
        {
           height =  Integer.parseInt(tfHeight.getText());
        }
        catch (NumberFormatException ex)
        {
           height = DEFAULT_HEIGHT;  
         
        }
        if(height > sliderHeight.getMaximum())
        {
            height = sliderHeight.getMaximum();
        }
        if(height < sliderHeight.getMinimum())
        {
            height = sliderHeight.getMinimum();
        }
        sliderHeight.setValue(height);
    }//GEN-LAST:event_tfHeightKeyReleased

    private boolean validateName(String name)
    {
        if(name.matches("[\\- \\).\\/(A-Za-z0-9]{1,100}"))
       {
          
         return true;
       }
        else
        {
            JOptionPane.showMessageDialog(this,"Entered name must be 1-100 characters long\n"
                   + " made up of uppercase/lowercase letters,\n"
                   + " numbers, spaces, dot, dash, slash, parenthesis","Input error",  
                       JOptionPane.ERROR_MESSAGE);
           return false; 
        }
        
       
        
    }
   static SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd"); 
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       //name
       String name = null;
       if(validateName(tfName.getText()) != false)
       {
           name = tfName.getText();
       }
       else
       {
           return;
       }
       
       
       //height (from slider)
       int height = sliderHeight.getValue();
       
       //date of birth
       Date dateOfBirth;
       
       try
       {
            dateOfBirth = dateFormat.parse(tfDOB.getText());
            if(dateOfBirth.before(dateFormat.parse("1900/01/01")) 
               || dateOfBirth.after(dateFormat.parse("2101/01/01")))
            {
                JOptionPane.showMessageDialog(this,"Year must be between 1900 and 2101","Input error",  
                       JOptionPane.ERROR_MESSAGE);
         return;
            }
       }
       catch(ParseException ex)
       {
           JOptionPane.showMessageDialog(this,"Date is unparseable","Input error",  
                       JOptionPane.ERROR_MESSAGE);
         return;
       }
       
       Person person = new Person(name, height, dateOfBirth);
       
       modelPeopleList.addElement(person);
       clearFields();
     
       
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       if(modelPeopleList.isEmpty())
       {
           JOptionPane.showMessageDialog(this,"The list is empty","Notification",  
                       JOptionPane.ERROR_MESSAGE);
         return;
       }
       if(lstPeople.getSelectedIndex() == -1)
       {
           JOptionPane.showMessageDialog(this,"First select item to be deleted","Action required",  
                       JOptionPane.ERROR_MESSAGE);
         return;
       }
       int dialogAnswer = JOptionPane.showConfirmDialog (null, "Would you like to confirm item to be deleted?\n" + "\""+ lstPeople.getSelectedValue() + "\"",
             "Confirmation needed",JOptionPane.YES_NO_OPTION);
        if(dialogAnswer == JOptionPane.YES_OPTION)
        {
           modelPeopleList.remove(lstPeople.getSelectedIndex()); 
        }
       
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
      if(modelPeopleList.isEmpty())
      {
          JOptionPane.showMessageDialog(this,"The list is empty, nothing to modify","Notification",  
                       JOptionPane.ERROR_MESSAGE);
         return;
      }
      if(lstPeople.getSelectedIndex() == -1)
       {
           JOptionPane.showMessageDialog(this,"First select item to be modified","Action required",  
                       JOptionPane.ERROR_MESSAGE);
         return;
       }
      Person person = lstPeople.getSelectedValue();
      
      if(validateName(tfName.getText()) == true)
      {
           person.name = tfName.getText();        
      }
      else{
          return;
      }
      person.heightCm = sliderHeight.getValue();
      
      try
      {
          person.dateOfBirth = dateFormat.parse(tfDOB.getText());
          if(dateFormat.parse(tfDOB.getText()).before(dateFormat.parse("1900/01/01")) || dateFormat.parse(tfDOB.getText()).after(dateFormat.parse("2101/01/01")) )
          {
             JOptionPane.showMessageDialog(this,"Year must be between 1900 an d 2101","Action required",  
                       JOptionPane.ERROR_MESSAGE);
         return; 
          }
      }
      catch(ParseException ex)
      {
          JOptionPane.showMessageDialog(this,"Date is unparseable","Action required",  
                       JOptionPane.ERROR_MESSAGE);
         return;
      }
      
          
       //forse to update model to lstPeople  
       lstPeople.setModel(modelPeopleList);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void saveDataToFile()
    {
        if(modelPeopleList.isEmpty())
        {
            System.exit(1);
        }
     //output to file and append there (for it added filewriter and true)
     try (PrintWriter fileOutput = new PrintWriter(new FileWriter(new File("pessoa.txt"),true)))
     {
         for(int i = modelPeopleList.size() -1; i >= 0; i--)
         {
             String line = String.format("%s;%d;%s",modelPeopleList.getElementAt(i).name, modelPeopleList.getElementAt(i).heightCm,
                dateFormat.format(modelPeopleList.getElementAt(i).dateOfBirth));
             fileOutput.println(line);
         }
        
     }
     catch(IOException ex)
     {
          JOptionPane.showMessageDialog(this, "Unable writing to file: \n" +ex.getMessage(), "File access error",JOptionPane.ERROR_MESSAGE);
                   
     }
    }
    
    private void loadDataFromFile()
    {
        // loading info from a file
        try(Scanner fileInput = new Scanner(new File("pessoa.txt")))       //try to read from file
        {
           
            //while there is next line, keep loading
            while(fileInput.hasNextLine())
            {
                String [] result = fileInput.nextLine().split(";");
                Person person = new Person(result[0], Integer.parseInt(result[1]), dateFormat.parse(result[2]));
                modelPeopleList.addElement(person);
            }
            
            }
        catch (IOException ex)
        {
            JOptionPane.showMessageDialog(this,"Error reading from file\n" + ex.getMessage(),"error",  
                       JOptionPane.ERROR_MESSAGE);
            return;
        }
        catch (ParseException ex)
        {
            JOptionPane.showMessageDialog(this,"Could not parse\n" + ex.getMessage(),"error",  
                       JOptionPane.ERROR_MESSAGE);
            return;
        }
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        saveDataToFile();
    }//GEN-LAST:event_formWindowClosing

    private void clearFields()
    {
        tfName.setText("");
        sliderHeight.setValue(DEFAULT_HEIGHT);
        tfHeight.setText(DEFAULT_HEIGHT+"");
        tfDOB.setText("");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModelWithObjectType.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModelWithObjectType.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModelWithObjectType.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModelWithObjectType.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModelWithObjectType().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblHeight;
    private javax.swing.JLabel lblName;
    private javax.swing.JList<Person> lstPeople;
    private javax.swing.JSlider sliderHeight;
    private javax.swing.JTextField tfDOB;
    private javax.swing.JTextField tfHeight;
    private javax.swing.JTextField tfName;
    // End of variables declaration//GEN-END:variables
}

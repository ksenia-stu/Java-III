/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package day09flightsdb;

import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class Day09FlightsDb extends javax.swing.JFrame {

    //create model for Flights list on main JFrame
    DefaultListModel<Flight> modelFlightsList = new DefaultListModel<>();

    /**
     * *******Create model for combobox load enums into combobox  ******
     */
    // 1. In design > properties > add  model comboBoxModelFlightType to combobox
    // 2. In design > properties > code >  in combobox change type from <String> to <Flight.Type>
    //3. Here in code add values from enum Type (Flight.Type.values()) to comboBoxModelFlightType
    DefaultComboBoxModel<Flight.Type> comboBoxModelFlightType = new DefaultComboBoxModel<>(Flight.Type.values());

    /*create variable to check if item is updated or added */
    //if nothing is selected then it is adding, if something is selected then updating
    int currentlyEditedItemIndex = -1;  //adding

    //Create instance of Database
    Database db;

    /* FOR EXPORTING to FILE */
    static final String SUFFIX_TXT = ".txt";
    static final String FILENAME_PATTERN = ".+\\.[A-Za-z0-9]+$";

    /**
     * Creates new form Day09FlightsDb
     */
    public Day09FlightsDb() {
        initComponents();

        //set dimentions of JFrame to load
        setPreferredSize(new Dimension(800, 600));

        //TRY TO ESTABLISH CONNECTION WITH DATABASE SERVER
        try {
            db = new Database();

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to connect: " + ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }

        //LOAD INFO FROM DATABASE INTO MODEL
        loadFlightFromDatabase();

        //set popup menu invisible
        popupDelete.setVisible(false);
    }

    /**
     * *********** METHOD TO LOAD DATA FROM DATABASE   ***********
     */
    private void loadFlightFromDatabase() {

        try {
            //select all records from database and put them in list
            ArrayList<Flight> list = db.getAllFlights();

            //clear all items from flightsModel
            modelFlightsList.clear();

            //addd items from list to model
            modelFlightsList.addAll(list);

            //update status (how many flights are in model)
            lblStatus.setText("Total Flights: " + modelFlightsList.size());
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to connect: " + ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dlgAddEdit = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        dlgAddEdit_lblId = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dlgAddEdit_ftfDate = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        dlgAddEdit_tfFromCode = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        dlgAddEdit_tfToCode = new javax.swing.JTextField();
        dlgAddEdit_comboType = new javax.swing.JComboBox<>();
        dlgAddEdit_sliderPassengers = new javax.swing.JSlider();
        jLabel6 = new javax.swing.JLabel();
        dlgAddEdit_lblPassengers = new javax.swing.JLabel();
        dlgAddEdit_btCancel = new javax.swing.JButton();
        dlgAddEdit_btSave = new javax.swing.JButton();
        popupDelete = new javax.swing.JPopupMenu();
        miDelete = new javax.swing.JMenuItem();
        fileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstFlights = new javax.swing.JList<>();
        lblStatus = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        miFileSave = new javax.swing.JMenuItem();
        separator1 = new javax.swing.JPopupMenu.Separator();
        miFileExit = new javax.swing.JMenuItem();
        menuAdd = new javax.swing.JMenu();

        jLabel2.setText("Id:");

        dlgAddEdit_lblId.setText("-");

        jLabel3.setText("Date:");

        jLabel4.setText("From code:");

        jLabel5.setText("To code:");

        dlgAddEdit_comboType.setModel(comboBoxModelFlightType);

        dlgAddEdit_sliderPassengers.setMajorTickSpacing(50);
        dlgAddEdit_sliderPassengers.setMaximum(200);
        dlgAddEdit_sliderPassengers.setMinorTickSpacing(10);
        dlgAddEdit_sliderPassengers.setPaintLabels(true);
        dlgAddEdit_sliderPassengers.setPaintTicks(true);
        dlgAddEdit_sliderPassengers.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dlgAddEdit_sliderPassengersStateChanged(evt);
            }
        });

        jLabel6.setText("passengers:");

        dlgAddEdit_lblPassengers.setText("50");

        dlgAddEdit_btCancel.setText("Cancel");
        dlgAddEdit_btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dlgAddEdit_btCancelActionPerformed(evt);
            }
        });

        dlgAddEdit_btSave.setText("Save");
        dlgAddEdit_btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dlgAddEdit_btSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dlgAddEditLayout = new javax.swing.GroupLayout(dlgAddEdit.getContentPane());
        dlgAddEdit.getContentPane().setLayout(dlgAddEditLayout);
        dlgAddEditLayout.setHorizontalGroup(
            dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgAddEditLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dlgAddEdit_sliderPassengers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(dlgAddEditLayout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(dlgAddEdit_ftfDate, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(dlgAddEditLayout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(dlgAddEdit_lblId, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(dlgAddEditLayout.createSequentialGroup()
                            .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5))
                            .addGap(18, 18, 18)
                            .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(dlgAddEdit_tfFromCode)
                                .addComponent(dlgAddEdit_tfToCode)))
                        .addComponent(dlgAddEdit_comboType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(dlgAddEditLayout.createSequentialGroup()
                        .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dlgAddEditLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel6))
                            .addComponent(dlgAddEdit_btCancel))
                        .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dlgAddEditLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dlgAddEdit_lblPassengers, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(dlgAddEditLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(dlgAddEdit_btSave)))))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        dlgAddEditLayout.setVerticalGroup(
            dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgAddEditLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(dlgAddEdit_lblId))
                .addGap(20, 20, 20)
                .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(dlgAddEdit_ftfDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(dlgAddEdit_tfFromCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(dlgAddEdit_tfToCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(dlgAddEdit_comboType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(dlgAddEdit_sliderPassengers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(dlgAddEdit_lblPassengers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dlgAddEdit_btCancel)
                    .addComponent(dlgAddEdit_btSave))
                .addGap(20, 20, 20))
        );

        miDelete.setText("Delete");
        miDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDeleteActionPerformed(evt);
            }
        });
        popupDelete.add(miDelete);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lstFlights.setModel(modelFlightsList);
        lstFlights.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstFlights.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstFlightsMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lstFlightsMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(lstFlights);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        lblStatus.setText("Total flights:");
        getContentPane().add(lblStatus, java.awt.BorderLayout.PAGE_END);

        menuFile.setText("File");
        menuFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileActionPerformed(evt);
            }
        });

        miFileSave.setText("Save selected..");
        miFileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miFileSaveActionPerformed(evt);
            }
        });
        menuFile.add(miFileSave);
        menuFile.add(separator1);

        miFileExit.setText("Exit");
        miFileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miFileExitActionPerformed(evt);
            }
        });
        menuFile.add(miFileExit);

        jMenuBar1.add(menuFile);

        menuAdd.setText("Add");
        menuAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuAddMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuAdd);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dlgAddEdit_sliderPassengersStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dlgAddEdit_sliderPassengersStateChanged
        /**
         * ******* SLIDER STATE CHANCHED (to reflect slider value on passengers label)*****
         */
        // !!!! Maybe not needed
        dlgAddEdit_lblPassengers.setText(dlgAddEdit_sliderPassengers.getValue() + "");
    }//GEN-LAST:event_dlgAddEdit_sliderPassengersStateChanged

    private void lstFlightsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstFlightsMouseClicked
        /**
         * *********** MOUSE CLICKED IN LSTFLIGHTS (main list with flights) ******
         */

        /**
         * * IF LEFT BUTTON WAS DOUBLE CLICKED, SHOW UPDATE DIALOG ***
         */
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {

            //make sure that some item is selected
            Flight f = lstFlights.getSelectedValue();
            if (f == null) {
                return;
            }

            //set button for "Update"
            dlgAddEdit_btSave.setText("Update");

            //set fields values of dialog to values of selected item
            dlgAddEdit_lblId.setText(f.getId() + "");
            dlgAddEdit_ftfDate.setText(Flight.dateFormat.format(f.getOnDay()));
            dlgAddEdit_tfFromCode.setText(f.getFromCode());
            dlgAddEdit_tfToCode.setText(f.getToCode());
            dlgAddEdit_sliderPassengers.setValue(f.getPassengers());
            dlgAddEdit_comboType.setSelectedItem(f.getType());

            //set new value for currently edited item
            currentlyEditedItemIndex = lstFlights.getSelectedIndex();

            // show the dialog
            dlgAddEdit.pack();
            dlgAddEdit.setLocationRelativeTo(this);
            dlgAddEdit.setVisible(true);

        }

        /**
         * * IF RIGHT BUTTON WAS DOUBLE CLICKED, SHOW DELETE POPUP ***
         */
        //to check if mouse was clicked 2 times and only right button was clicked
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON3) {
            int index = lstFlights.getSelectedIndex();
            if (index != -1) {
                //show pop up
                popupDelete.show(lstFlights, evt.getX(), evt.getY()); //and show the menu
            }

        }
    }//GEN-LAST:event_lstFlightsMouseClicked

    private void menuAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuAddMouseClicked
        /**
         * ************ ADD MOUSE CLICKED ***********
         */
        //set text on button to "Add"
        dlgAddEdit_btSave.setText("Add");

        //curently edited item (none), nothing is selected
        currentlyEditedItemIndex = -1;
        // cleanup the dialog before showing it
        clearUpInputs();

        // show the dialog
        dlgAddEdit.pack();
        dlgAddEdit.setLocationRelativeTo(this);
        dlgAddEdit.setVisible(true);
    }//GEN-LAST:event_menuAddMouseClicked

    private void dlgAddEdit_btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dlgAddEdit_btCancelActionPerformed
        /**
         * ********** BUTOON CANCEL ON DIALOG *********
         */
        dlgAddEdit.setVisible(false);
    }//GEN-LAST:event_dlgAddEdit_btCancelActionPerformed

    private void dlgAddEdit_btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dlgAddEdit_btSaveActionPerformed
        /**
         * ********** BUTTON SAVE IN DIALOG ACTION PERFORMED  ********
         */
        try {
            //get infromation from fileds of dialog
            Date onDay = Flight.dateFormat.parse(dlgAddEdit_ftfDate.getText());    //ParseException
            String fromCode = dlgAddEdit_tfFromCode.getText();
            String toCode = dlgAddEdit_tfToCode.getText();
            int passengers = dlgAddEdit_sliderPassengers.getValue();
            Flight.Type type = (Flight.Type) dlgAddEdit_comboType.getSelectedItem();

            //create object flight with all values (except id, as it is autoincrement)
            Flight flight = new Flight(0, onDay, fromCode, toCode, type, passengers);

            /*----  CHECK IF IT IS ADD OR UPDATE ----*/
            if (currentlyEditedItemIndex == -1) {
                db.addFlight(flight);  //InvalidDataException    /*IT IS ADD FLIGHT TO DATABASE*/
            } else {
                flight.setId(lstFlights.getSelectedValue().getId());
                /* IT IS UPDATE FLIGHT IN DATABASE */
                db.updateFlight(flight);
            }

            //reload data from database to model
            loadFlightFromDatabase();

            //cleanup inputs
            clearUpInputs();

            //close dialog
            dlgAddEdit.setVisible(false);

        } catch (IllegalArgumentException | ParseException | InvalidDataException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to add Flight: " + ex.getMessage(), "Internal error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to connect: " + ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_dlgAddEdit_btSaveActionPerformed

    private void miFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miFileExitActionPerformed
        /**
         * *** EXIT ACTION PERFORMED IN FILE > EXIT (top menu) ******
         */
        dispose();
    }//GEN-LAST:event_miFileExitActionPerformed

    private void miDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDeleteActionPerformed
        /**
         * ***** POPUP MENU DELETE BUTTON (the only one) ACTION PERFORMED *******
         */

        //check if some item is selected to delete
        if (lstFlights.isSelectionEmpty()) {
            return;  //if no, return
        }

        //confirmation dialog (Are you sure to delete?) 
        //in this case multiple records can be deleted
        int decision = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete " + lstFlights.getSelectedIndices().length + "record(s)?\n",
                "Confirm deletion",
                JOptionPane.OK_CANCEL_OPTION);

        //if deletion is confirmed
        if (decision == JOptionPane.OK_OPTION) {
            try {
                //for each selected item in list delete them from database
                for (Flight f : lstFlights.getSelectedValuesList()) {
                    db.deleteFlight(f.getId());
                }

                //reload records from database to model
                loadFlightFromDatabase();
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Failed to delete a record: " + ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
            }

        }

    }//GEN-LAST:event_miDeleteActionPerformed

    private void lstFlightsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstFlightsMousePressed
        if (evt.isPopupTrigger()) {
            popupDelete.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_lstFlightsMousePressed

    private void menuFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuFileActionPerformed

    private void miFileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miFileSaveActionPerformed
        /**
         * ******* SAVE BUTTON IN MENU IN FILE ACTION PERFORMED (save selected items)*****
         */

        //if nothing is selected 
        if (lstFlights.isSelectionEmpty()) {
            //show message that nothing is selected
            JOptionPane.showMessageDialog(this, "Please choose at least one record to save");
            return;
        }
        //if something is selected then set title of dialog
        fileChooser.setDialogTitle("Export to File");

        //if person presses ok (meaning to save file)
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {

            File chosenFile = fileChooser.getSelectedFile();

            //adjust saved file name
            if (!chosenFile.getName().toLowerCase().matches(FILENAME_PATTERN)) {
                chosenFile = new File(fileChooser.getSelectedFile() + SUFFIX_TXT);
            }

            //save data to file
            saveDataToFile(chosenFile);
        }
    }//GEN-LAST:event_miFileSaveActionPerformed

    /**
     * ******** METHOD THAT SAVES DATA TO FILE *******
     */
    private void saveDataToFile(File file) {

        try (PrintWriter fileOutput = new PrintWriter(file)) {

            //get all selected values from lstFlights and output them to file
            for (Flight f : lstFlights.getSelectedValuesList()) {
                String dataLine = f.toDataLine();
                fileOutput.println(dataLine);
            };

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error saving data to file:\n" + ex.getMessage(),
                    "File error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * ****************** METHOD TO CLEAR INPUTS IN DIALOG *************
     */
    private void clearUpInputs() {
        dlgAddEdit_lblId.setText("-");
        dlgAddEdit_ftfDate.setText("01-01-1970");
        dlgAddEdit_tfFromCode.setText("");
        dlgAddEdit_tfToCode.setText("");
        dlgAddEdit_sliderPassengers.setValue(0);
        dlgAddEdit_comboType.setSelectedItem(Flight.Type.Domestic);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Day09FlightsDb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Day09FlightsDb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Day09FlightsDb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Day09FlightsDb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Day09FlightsDb().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog dlgAddEdit;
    private javax.swing.JButton dlgAddEdit_btCancel;
    private javax.swing.JButton dlgAddEdit_btSave;
    private javax.swing.JComboBox<Flight.Type> dlgAddEdit_comboType;
    private javax.swing.JFormattedTextField dlgAddEdit_ftfDate;
    private javax.swing.JLabel dlgAddEdit_lblId;
    private javax.swing.JLabel dlgAddEdit_lblPassengers;
    private javax.swing.JSlider dlgAddEdit_sliderPassengers;
    private javax.swing.JTextField dlgAddEdit_tfFromCode;
    private javax.swing.JTextField dlgAddEdit_tfToCode;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JList<Flight> lstFlights;
    private javax.swing.JMenu menuAdd;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem miDelete;
    private javax.swing.JMenuItem miFileExit;
    private javax.swing.JMenuItem miFileSave;
    private javax.swing.JPopupMenu popupDelete;
    private javax.swing.JPopupMenu.Separator separator1;
    // End of variables declaration//GEN-END:variables
}
